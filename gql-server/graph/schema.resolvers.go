package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"database/sql"
	"fmt"
	"gql-server/database"
	"gql-server/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	foundUser, err := database.DB.GetUser(ctx, int64(input.UserID))
	if err != nil {
		return nil, err
	}

	fmt.Printf("Found %v", foundUser)

	insertedTodo, err := database.DB.CreateTodo(ctx, database.CreateTodoParams{
		Text:   sql.NullString{String: input.Text, Valid: true},
		UserID: foundUser.ID,
	})
	if err != nil {
		return nil, err
	}

	todo := &model.Todo{
		Text:   insertedTodo.Text.String,
		ID:     int(insertedTodo.ID),
		User:   &model.User{ID: int(foundUser.ID), Name: foundUser.Name},
		UserID: input.UserID,
	}

	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	foundTodos, err := database.DB.GetTodosWithUser(ctx)
	if err != nil {
		return nil, err
	}

	todos := []*model.Todo{}
	for _, foundTodo := range foundTodos {
		todos = append(todos, &model.Todo{
			ID:     int(foundTodo.ID),
			Text:   foundTodo.Text.String,
			Done:   foundTodo.Done.Bool,
			UserID: int(foundTodo.UserID),
			User: &model.User{
				ID:   int(foundTodo.UserID),
				Name: foundTodo.Name.String,
			},
		})
	}

	return todos, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.users, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return &model.User{ID: obj.UserID, Name: obj.User.Name}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *todoResolver) ID(ctx context.Context, obj *model.Todo) (int, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *queryResolver) Carlos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}
